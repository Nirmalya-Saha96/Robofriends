{"version":3,"sources":["components/SearchBox.js","components/Card.js","components/CardList.js","components/Scroll.js","containers/App.js","reportWebVitals.js","index.js"],"names":["SearchBox","searchfeild","searchChange","className","type","placeholder","onChange","Card","name","email","id","alt","src","CardList","robots","map","user","i","Scroll","props","style","overflowY","border","height","children","App","onSearchChange","event","setState","target","value","state","fetch","then","response","json","users","filteredRobots","this","filter","toLowerCase","includes","length","console","log","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"6MAeeA,EAZC,SAAC,GAA8B,EAA7BC,YAA8B,IAAjBC,EAAgB,EAAhBA,aAC3B,OACQ,qBAAKC,UAAU,MAAf,SACI,uBACAA,UAAU,mCACTC,KAAK,SACLC,YAAY,gBACZC,SAAUJ,OCkBZK,EA1BF,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,GACzB,OACE,sBAAKP,UAAU,sDAAf,UACE,qBAAKQ,IAAI,SAASC,IAAG,+BAA0BF,EAA1B,mBACrB,gCACE,6BAAKF,IACL,4BAAIC,WCeCI,EAnBE,SAAC,GAAY,IAAXC,EAAU,EAAVA,OACf,OACQ,8BAEQA,EAAOC,KAAI,SAACC,EAAMC,GACd,OACQ,cAAC,EAAD,CAEAP,GAAII,EAAOG,GAAGP,GACdF,KAAMM,EAAOG,GAAGT,KAChBC,MAAOK,EAAOG,GAAGR,OAHZQ,SCDtBC,EARA,SAACC,GACZ,OACI,qBAAKC,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,SAArE,SACKJ,EAAMK,YC+CJC,E,kDA7CX,aAAc,IAAD,8BACT,gBAgBJC,eAAiB,SAACC,GACd,EAAKC,SAAS,CAAC3B,YAAa0B,EAAME,OAAOC,SAhBzC,EAAKC,MAAM,CACPjB,OAAQ,GACRb,YAAa,IAJR,E,qDAQb,WAAqB,IAAD,OAChB+B,MAAM,8CAA8CC,MAAK,SAAAC,GACtD,OAAOA,EAASC,UAElBF,MAAK,SAAAG,GACF,EAAKR,SAAS,CAACd,OAAQsB,S,oBAQ/B,WAAS,IAAD,OACEC,EAAiBC,KAAKP,MAAMjB,OAAOyB,QAAO,SAAAzB,GAC5C,OAAOA,EAAON,KAAKgC,cAAcC,SAAS,EAAKV,MAAM9B,YAAYuC,kBAErE,OAAgC,IAA7BF,KAAKP,MAAMjB,OAAO4B,OACV,0CAEPC,QAAQC,IAAIP,GAER,sBAAKlC,UAAU,KAAf,UACI,8CACA,cAAC,EAAD,CAAWD,aAAcoC,KAAKZ,iBAC9B,cAAC,EAAD,UACG,cAAC,EAAD,CAAUZ,OAAQuB,c,GAnCvBQ,aCMHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBf,MAAK,YAAkD,IAA/CgB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCCdO,IAASC,OACL,cAAC,EAAD,IAEFC,SAASC,eAAe,SAM1BX,M","file":"static/js/main.e1a9313d.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nconst SearchBox=({searchfeild, searchChange})=>{\r\n    return(\r\n            <div className='pa2'>\r\n                <input \r\n                className='pa3 ba b--green bg-lightest-blue'\r\n                 type=\"search\" \r\n                 placeholder='search robots' \r\n                 onChange={searchChange}/>\r\n            </div>\r\n        );\r\n}\r\n\r\nexport default SearchBox;\r\n","import React from 'react';\r\n\r\nconst Card = ({ name, email, id }) => {\r\n    return (\r\n      <div className='tc grow bg-light-green br3 pa3 ma2 dib bw2 shadow-5'>\r\n        <img alt='robots' src={`https://robohash.org/${id}?size=200x200`} />\r\n        <div>\r\n          <h2>{name}</h2>\r\n          <p>{email}</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n// const Card = (props)=>{\r\n//     var idd = props.id;\r\n//     return(\r\n//             <div className = 'bg-light-green dib br3 pa3 ma2 grow shadow-5'>\r\n       \r\n//                 <img alt='alien' src={idd}/>\r\n//                 <div>\r\n//                     <h2>{props.name}</h2>\r\n//                     <p>{props.email}</p>\r\n//                 </div>\r\n//             </div>\r\n//         );\r\n// }\r\n\r\nexport default Card;\r\n\r\n","import React from 'react';\r\nimport Card from './Card';\r\n\r\n\r\nconst CardList = ({robots})=>{\r\n    return(\r\n            <div>\r\n                {\r\n                    robots.map((user, i) => {\r\n                        return(\r\n                                <Card\r\n                                key={i}\r\n                                id={robots[i].id}\r\n                                name={robots[i].name}\r\n                                email={robots[i].email}\r\n                                />\r\n                            );\r\n                    })\r\n                }\r\n            </div>\r\n        );\r\n}\r\n\r\nexport default CardList;\r\n\r\n","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return(\r\n        <div style={{overflowY: 'scroll', border: '1px solid black', height: '800px'}}>\r\n            {props.children}\r\n        </div>\r\n    ) \r\n};\r\n\r\nexport default Scroll;","import React, {Component} from 'react';\r\nimport SearchBox from '../components/SearchBox';\r\nimport CardList from '../components/CardList';\r\nimport Scroll from '../components/Scroll';\r\n\r\n\r\nclass App extends Component{\r\n    constructor(){\r\n        super()\r\n        this.state={\r\n            robots: [],\r\n            searchfeild: ''\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch('https://jsonplaceholder.typicode.com/users').then(response=> {\r\n           return response.json();\r\n        })\r\n        .then(users=>{\r\n            this.setState({robots: users})\r\n        });        \r\n    }\r\n\r\n    onSearchChange = (event) => {\r\n        this.setState({searchfeild: event.target.value})\r\n    }\r\n\r\n    render(){\r\n        const filteredRobots = this.state.robots.filter(robots=>{\r\n            return robots.name.toLowerCase().includes(this.state.searchfeild.toLowerCase());\r\n        })\r\n        if(this.state.robots.length === 0){\r\n            return <h1>Loading</h1>\r\n        }else{\r\n            console.log(filteredRobots);\r\n            return(\r\n                <div className='tc'>\r\n                    <h1>Robo Friends</h1>\r\n                    <SearchBox searchChange={this.onSearchChange}/>\r\n                    <Scroll>\r\n                       <CardList robots={filteredRobots}/>\r\n                    </Scroll>\r\n                    \r\n                 </div>\r\n              );\r\n        }\r\n       \r\n    }\r\n    \r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons';\n\n\nReactDOM.render(\n    <App/>\n    ,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}